// !!!!!!!!!!!!!!!!!!!!!!
// DO NOT TOUCH THIS FILE
// !!!!!!!!!!!!!!!!!!!!!!

// This build file has the following goals:
// - Provide a single "build" task that does everything
// - Provide human-readable output for exams, including testing and code coverage
// - Provide machine-readable output for exam grading
// - Mimic IDE behavior that users may expect, e.g. always run all tests, show tests even if they pass, ...
// Unfortunately, we cannot actually force users to use the "build" task because IDEs run Gradle tasks (and there's no easy way to tell if the task is run by an IDE)


plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

repositories {
    jcenter()
}

dependencies {
    // JUnit 5 "Jupiter"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    // Hamcrest
    testImplementation 'org.hamcrest:hamcrest-library:2.1'
}

application {
    mainClassName 'App'
}

test {
    useJUnitPlatform()
    // Show stdout/stderr, helps for debugging
    testLogging.showStandardStreams true
    // Do not fail builds because of failing tests
    ignoreFailures true

    testLogging {
        // Always show all tests, even passed ones
        events 'passed', 'skipped', 'failed'
        // Always run all tests
        outputs.upToDateWhen { false }
    }

    // Ensure tests don't get stuck in infinite loops
    timeout = Duration.ofSeconds(30)
}

jacocoTestReport {
    // XML report, for scripting purposes
    reports.xml.enabled true
    // HTML report, for human purposes
    reports.html.destination file("${buildDir}/reports/coverage")
}

build {
    // Always generate coverage
    dependsOn jacocoTestReport
    // Add some help to JaCoCo reports
    doLast {
        def msg = '''SwEng help:
                     <ul>
                       <li>JaCoCo calls statements "instructions"</li>
                       <li>JaCoCo does not compute path coverage, because it is usually not helpful in real code</li>
                       <li>The column 'Cxty' is the <a target="_blank" href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">cyclomatic complexity</a></li>
                     </ul>'''

        fileTree("${buildDir}/reports/coverage").include('**/*.html').each { f ->
            java.nio.file.Files.writeString(f.toPath(), java.nio.file.Files.readString(f.toPath()).replace('</h1>', "</h1><p>${msg}</p>"))
        }
    }
    // Tell the user about the report file
    doLast {
        println 'You can view the code coverage report in build/reports/coverage/index.html'
    }
}

run {
    standardInput = System.in
}
